//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DonorAppVersion2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class sampleEntities : DbContext
    {
        public sampleEntities()
            : base("name=sampleEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdminSetting> AdminSettings { get; set; }
        public virtual DbSet<DonorAilmentDetail> DonorAilmentDetails { get; set; }
        public virtual DbSet<DonorCycle> DonorCycles { get; set; }
        public virtual DbSet<DonorCycleUpdate> DonorCycleUpdates { get; set; }
        public virtual DbSet<DonorFamilyTreeDiseaseDetail> DonorFamilyTreeDiseaseDetails { get; set; }
        public virtual DbSet<DonorHealthQuestionsAnswered> DonorHealthQuestionsAnswereds { get; set; }
        public virtual DbSet<Donor> Donors { get; set; }
        public virtual DbSet<DonorsRegisteredWithPartner> DonorsRegisteredWithPartners { get; set; }
        public virtual DbSet<FamilyDiseaseQuestion> FamilyDiseaseQuestions { get; set; }
        public virtual DbSet<FamilyOfIntendedParent> FamilyOfIntendedParents { get; set; }
        public virtual DbSet<FamilyTreeDiseaseDetail> FamilyTreeDiseaseDetails { get; set; }
        public virtual DbSet<HealthQuestion> HealthQuestions { get; set; }
        public virtual DbSet<MatchDetail> MatchDetails { get; set; }
        public virtual DbSet<MatchRequestedByDonor> MatchRequestedByDonors { get; set; }
        public virtual DbSet<MatchRequestedByParent> MatchRequestedByParents { get; set; }
        public virtual DbSet<ParentAilmentDetail> ParentAilmentDetails { get; set; }
        public virtual DbSet<ParentFamilyTreeDiseaseDetail> ParentFamilyTreeDiseaseDetails { get; set; }
        public virtual DbSet<Parent> Parents { get; set; }
        public virtual DbSet<ParentsHealthQuestionsAnswered> ParentsHealthQuestionsAnswereds { get; set; }
        public virtual DbSet<ParentsRegisteredWithPartner> ParentsRegisteredWithPartners { get; set; }
        public virtual DbSet<PartnerAndTheirContact> PartnerAndTheirContacts { get; set; }
        public virtual DbSet<Partner> Partners { get; set; }
        public virtual DbSet<PartnersAttachedToDonorCycle> PartnersAttachedToDonorCycles { get; set; }
        public virtual DbSet<PaymentSummuryDonor> PaymentSummuryDonors { get; set; }
        public virtual DbSet<PaymentSummuryParent> PaymentSummuryParents { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual ObjectResult<GetAllDonors_Result> GetAllDonors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDonors_Result>("GetAllDonors");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
